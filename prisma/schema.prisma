// prisma/schema.prisma
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // uncomment next line if you use Prisma <5.10
    // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    CONSULTANT
    SALES
    MANAGEMENT
}

// Base container for permissions
model Profile {
    id          String       @id @default(cuid())
    name        String       @unique
    description String?
    permissions Permission[] // Enable simple and intuitive queries. Like parent to child (__r) in SF
    users       User[]
}

// Collections of permissions
model PermissionSet {
    id          String       @id @default(cuid())
    name        String       @unique
    description String?
    permissions Permission[] // Enable simple and intuitive queries. Like parent to child (__r) in SF
    users       User[] // Many-to-many relationship with users
}

// Individual permissions. i.e. Home:View, Holidays:View, Assignments:View, Lead:Create, etc
model Permission {
    id             String          @id @default(cuid())
    name           String          @unique
    description    String?
    profiles       Profile[] // Many-to-many relationship with profiles
    permissionSets PermissionSet[] // Many-to-many relationship with permission sets
}

model User {
    id              String          @id @default(cuid())
    salesforce_id   String?
    name            String?
    email           String          @unique
    emailVerified   DateTime?
    employee_number String?         @unique
    image           String?
    password        String?
    role            UserRole        @default(CONSULTANT)
    profile         Profile         @relation(fields: [profileId], references: [id])
    profileId       String          @default("deploy_consultant")
    permissionSets  PermissionSet[] 
    accounts        Account[]

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}
